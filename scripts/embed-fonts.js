/**
 * Font Embedding Script
 * 
 * This script reads font files and generates a TypeScript file with embedded fonts.
 * Run it whenever you need to update the embedded fonts.
 * 
 * Usage: node scripts/embed-fonts.js
 */

const fs = require('fs');
const path = require('path');

// Font files to embed
const FONT_FILES = [
  {
    path: 'public/fonts/KleeOne-Regular.ttf',
    exportName: 'KLEE_ONE_REGULAR',
    description: 'KleeOne Regular font (400 weight)'
  },
  {
    path: 'public/fonts/KleeOne-SemiBold.ttf',
    exportName: 'KLEE_ONE_SEMIBOLD',
    description: 'KleeOne SemiBold font (600 weight)'
  }
];

// Output file
const OUTPUT_FILE = 'src/lib/embedded-fonts.ts';

// Template for the output file
const generateFileContent = (fontData) => `/**
 * AUTOMATICALLY GENERATED FILE - DO NOT EDIT DIRECTLY
 * Generated by scripts/embed-fonts.js
 * 
 * This file contains embedded fonts as ArrayBuffer objects ready
 * to be used with @vercel/og ImageResponse component.
 */

/**
 * Helper function to convert Base64 string to ArrayBuffer
 */
function base64ToArrayBuffer(base64: string): ArrayBuffer {
  const binaryString = atob(base64);
  const len = binaryString.length;
  const bytes = new Uint8Array(len);
  
  for (let i = 0; i < len; i++) {
    bytes[i] = binaryString.charCodeAt(i);
  }
  
  return bytes.buffer;
}

${fontData.map(font => `// ${font.description}
export const ${font.exportName} = base64ToArrayBuffer('${font.data}');
`).join('\n')}
`;

// Main function
async function main() {
  try {
    const fontData = [];
    
    for (const font of FONT_FILES) {
      console.log(`Reading ${font.path}...`);
      const fontPath = path.resolve(process.cwd(), font.path);
      
      if (!fs.existsSync(fontPath)) {
        console.error(`Error: Font file not found: ${fontPath}`);
        continue;
      }
      
      // Read the font file
      const fileBuffer = fs.readFileSync(fontPath);
      // Convert to Base64
      const base64Data = fileBuffer.toString('base64');
      
      fontData.push({
        ...font,
        data: base64Data
      });
      
      console.log(`Processed ${font.path} (${fileBuffer.length} bytes)`);
    }
    
    // Generate the output file
    const outputContent = generateFileContent(fontData);
    
    // Ensure the output directory exists
    const outputDir = path.dirname(OUTPUT_FILE);
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }
    
    // Write the output file
    fs.writeFileSync(OUTPUT_FILE, outputContent);
    
    console.log(`Successfully generated ${OUTPUT_FILE}`);
  } catch (error) {
    console.error('Error:', error);
    process.exit(1);
  }
}

main(); 